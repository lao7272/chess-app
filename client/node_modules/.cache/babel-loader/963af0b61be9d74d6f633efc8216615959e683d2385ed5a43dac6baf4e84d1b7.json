{"ast":null,"code":"import { Position, Chessboard } from \"./models\";\nimport { Pawn, Knight, Bishop, Rook, Queen, King } from \"./models/pieces\";\nconst GRID_SIZE = 62.5;\nconst VERTICAL_AXIS = ['1', '2', '3', '4', '5', '6', '7', '8'];\nconst HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nconst initialChessboard = new Chessboard([new Rook(new Position(0, 7), \"black\", false), new Rook(new Position(7, 7), \"black\", false), new Knight(new Position(1, 7), \"black\"), new Knight(new Position(6, 7), \"black\"), new Bishop(new Position(2, 7), \"black\"), new Bishop(new Position(5, 7), \"black\"), new Queen(new Position(3, 7), \"black\"), new King(new Position(4, 7), \"black\", false), new Rook(new Position(0, 0), \"white\", false), new Rook(new Position(7, 0), \"white\", false), new Knight(new Position(1, 0), \"white\"), new Knight(new Position(6, 0), \"white\"), new Bishop(new Position(2, 0), \"white\"), new Bishop(new Position(5, 0), \"white\"), new Queen(new Position(3, 0), \"white\"), new King(new Position(4, 0), \"white\", false), new Pawn(new Position(0, 6), \"black\", false), new Pawn(new Position(1, 6), \"black\", false), new Pawn(new Position(2, 6), \"black\", false), new Pawn(new Position(3, 6), \"black\", false), new Pawn(new Position(4, 6), \"black\", false), new Pawn(new Position(5, 6), \"black\", false), new Pawn(new Position(6, 6), \"black\", false), new Pawn(new Position(7, 6), \"black\", false), new Pawn(new Position(0, 1), \"white\", false), new Pawn(new Position(1, 1), \"white\", false), new Pawn(new Position(2, 1), \"white\", false), new Pawn(new Position(3, 1), \"white\", false), new Pawn(new Position(4, 1), \"white\", false), new Pawn(new Position(5, 1), \"white\", false), new Pawn(new Position(6, 1), \"white\", false), new Pawn(new Position(7, 1), \"white\", false)], 1);\ninitialChessboard.getPossibleMoves();\nexport { HORIZONTAL_AXIS, VERTICAL_AXIS, initialChessboard, GRID_SIZE };","map":{"version":3,"names":["Position","Chessboard","Pawn","Knight","Bishop","Rook","Queen","King","GRID_SIZE","VERTICAL_AXIS","HORIZONTAL_AXIS","initialChessboard","getPossibleMoves"],"sources":["/Users/lao/Desktop/chess-app/client/src/Constants.js"],"sourcesContent":["import { Position, Chessboard} from \"./models\";\nimport { Pawn, Knight, Bishop, Rook, Queen, King } from \"./models/pieces\"\n\nconst GRID_SIZE = 62.5; \n\nconst VERTICAL_AXIS = ['1', '2', '3', '4', '5', '6', '7', '8'];\nconst HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\nconst initialChessboard = new Chessboard([\n    new Rook(new Position (0, 7), \"black\", false),\n    new Rook(new Position (7, 7), \"black\",  false),\n    new Knight(new Position (1, 7), \"black\"),\n    new Knight(new Position (6, 7), \"black\"),\n    new Bishop(new Position (2, 7), \"black\"),\n    new Bishop(new Position (5, 7), \"black\"),\n    new Queen(new Position (3, 7), \"black\"),\n    new King(new Position (4, 7), \"black\", false),\n    new Rook(new Position (0, 0), \"white\", false),\n    new Rook(new Position (7, 0), \"white\", false),\n    new Knight(new Position (1, 0), \"white\"),\n    new Knight(new Position (6, 0), \"white\"),\n    new Bishop(new Position (2, 0), \"white\"),\n    new Bishop(new Position (5, 0), \"white\"),\n    new Queen(new Position (3, 0), \"white\"),\n    new King(new Position (4, 0), \"white\", false),\n    new Pawn(new Position (0, 6), \"black\", false),\n    new Pawn(new Position (1, 6), \"black\", false),\n    new Pawn(new Position (2, 6), \"black\", false),\n    new Pawn(new Position (3, 6), \"black\", false),\n    new Pawn(new Position (4, 6), \"black\", false),\n    new Pawn(new Position (5, 6), \"black\", false),\n    new Pawn(new Position (6, 6), \"black\", false),\n    new Pawn(new Position (7, 6), \"black\", false),\n    new Pawn(new Position (0, 1), \"white\", false),\n    new Pawn(new Position (1, 1), \"white\", false),\n    new Pawn(new Position (2, 1), \"white\", false),\n    new Pawn(new Position (3, 1), \"white\", false),\n    new Pawn(new Position (4, 1), \"white\", false),\n    new Pawn(new Position (5, 1), \"white\", false),\n    new Pawn(new Position (6, 1), \"white\", false),\n    new Pawn(new Position (7, 1), \"white\", false)\n], 1);\ninitialChessboard.getPossibleMoves()\nexport {\n    HORIZONTAL_AXIS,\n    VERTICAL_AXIS, \n    initialChessboard,\n    GRID_SIZE\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}