{"ast":null,"code":"var _jsxFileName = \"/Users/lao/Desktop/chess-app/client/src/components/Referee/Referee.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport ChessBoard from '../Chessboard/Chessboard';\nimport PromotionAlert from '../PromotionAlert/PromotionAlert';\nimport GameOver from '../GameOver/GameOver';\nimport { initialChessboard } from '../../Constants';\nimport './Referee.css';\nimport { Bishop, Knight, Queen, Rook } from '../../models/pieces';\nimport MoveList from '../MoveList/MoveList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Referee() {\n  _s();\n  const [chessboard, setChessboard] = useState(initialChessboard.clone());\n  const [pawnPromotion, setpawnPromotion] = useState();\n  const [moveList, setMoveList] = useState(chessboard.moveList);\n  const promoteRef = useRef(null);\n  const checkmateRef = useRef(null);\n  function playMove(currentPiece, desiredPosition) {\n    if (currentPiece.team === \"white\" && chessboard.totalTurns % 2 !== 1) return false;\n    if (currentPiece.team === \"black\" && chessboard.totalTurns % 2 !== 0) return false;\n    const validMove = currentPiece.possibleMoves.some(move => move.samePosition(desiredPosition));\n    if (!validMove) return false;\n\n    // Playmove modifies the board, therefore, the chessboard is updated\n    setChessboard(() => {\n      const clonedChessboard = chessboard.clone();\n      const prevPiecesLen = clonedChessboard.pieces.length;\n      clonedChessboard.totalTurns++;\n      // MOVE LOGIC\n      clonedChessboard.playMove(currentPiece, desiredPosition, validMove);\n      // MOVE NOTATION\n      const lastMove = clonedChessboard.moveList ? clonedChessboard.moveList[clonedChessboard.moveList.length - 1] : undefined;\n      const take = prevPiecesLen > clonedChessboard.length ? true : false;\n      const move = {\n        type: currentPiece.type,\n        position: desiredPosition,\n        image: currentPiece.image,\n        take\n      };\n      if (!lastMove || lastMove.length === 2) {\n        clonedChessboard.moveList.push([move]);\n      } else if (lastMove.length < 2) {\n        clonedChessboard.moveList[clonedChessboard.moveList.length - 1].push(move);\n      }\n      // CHECK IF IT IS A DRAW\n      if (clonedChessboard.winningTeam || clonedChessboard.draw) checkmateRef.current.classList.remove(\"hidden\");\n      return clonedChessboard;\n    });\n    setMoveList(chessboard.moveList);\n\n    // PAWN PROMOTION\n    const promotion = currentPiece.team === \"white\" ? 7 : 0;\n    if (desiredPosition.y === promotion && currentPiece.isPawn) {\n      promoteRef.current.classList.remove(\"hidden\");\n      setpawnPromotion(prevPromotionPawn => {\n        const clonedCurrentPiece = currentPiece.clone();\n        clonedCurrentPiece.position = desiredPosition.clone();\n        return prevPromotionPawn = clonedCurrentPiece;\n      });\n    }\n  }\n  function promotePawn(type) {\n    if (!pawnPromotion) return;\n    promoteRef.current.classList.add('hidden');\n    setChessboard(() => {\n      const clonedChessboard = chessboard.clone();\n      clonedChessboard.pieces = clonedChessboard.pieces.reduce((result, piece) => {\n        if (piece.samePosition(pawnPromotion.position)) {\n          switch (type) {\n            case \"queen\":\n              result.push(new Queen(piece.position.clone(), piece.team));\n              break;\n            case \"knight\":\n              result.push(new Knight(piece.position.clone(), piece.team));\n              break;\n            case \"bishop\":\n              result.push(new Bishop(piece.position.clone(), piece.team));\n              break;\n            case \"rook\":\n              result.push(new Rook(piece.position.clone(), piece.team, true));\n              break;\n            default:\n              break;\n          }\n        } else {\n          result.push(piece);\n        }\n        return result;\n      }, []);\n      clonedChessboard.getPossibleMoves();\n      if (clonedChessboard.winningTeam || clonedChessboard.draw) checkmateRef.current.classList.remove(\"hidden\");\n      return clonedChessboard;\n    });\n    chessboard.getPossibleMoves();\n  }\n  function setPromotionTeam() {\n    if (!pawnPromotion) return \"white\";\n    return pawnPromotion.team === \"white\" ? \"white\" : \"black\";\n  }\n  function restartGame() {\n    checkmateRef.current.classList.add(\"hidden\");\n    setChessboard(() => {\n      const clonedChessboard = initialChessboard.clone();\n      initialChessboard.totalTurns = 1;\n      initialChessboard.moveList = [];\n      setMoveList([]);\n      return clonedChessboard;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(ChessBoard, {\n        playMove: playMove,\n        pieces: chessboard.pieces\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MoveList, {\n        moveList: moveList,\n        chessboard: chessboard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromotionAlert, {\n      setPromotionTeam: setPromotionTeam,\n      promotePawn: promotePawn,\n      promoteRef: promoteRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameOver, {\n      winningTeam: chessboard.winningTeam,\n      checkmateRef: checkmateRef,\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Referee, \"p2CqD5kTR0mWEIQa/8bNyJKv8/Q=\");\n_c = Referee;\nvar _c;\n$RefreshReg$(_c, \"Referee\");","map":{"version":3,"names":["React","useRef","useState","ChessBoard","PromotionAlert","GameOver","initialChessboard","Bishop","Knight","Queen","Rook","MoveList","jsxDEV","_jsxDEV","Fragment","_Fragment","Referee","_s","chessboard","setChessboard","clone","pawnPromotion","setpawnPromotion","moveList","setMoveList","promoteRef","checkmateRef","playMove","currentPiece","desiredPosition","team","totalTurns","validMove","possibleMoves","some","move","samePosition","clonedChessboard","prevPiecesLen","pieces","length","lastMove","undefined","take","type","position","image","push","winningTeam","draw","current","classList","remove","promotion","y","isPawn","prevPromotionPawn","clonedCurrentPiece","promotePawn","add","reduce","result","piece","getPossibleMoves","setPromotionTeam","restartGame","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lao/Desktop/chess-app/client/src/components/Referee/Referee.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport ChessBoard from '../Chessboard/Chessboard';\nimport PromotionAlert from '../PromotionAlert/PromotionAlert';\nimport GameOver from '../GameOver/GameOver';\nimport { initialChessboard } from '../../Constants';\nimport './Referee.css';\nimport { Bishop, Knight, Queen, Rook } from '../../models/pieces';\nimport MoveList from '../MoveList/MoveList';\n\nexport default function Referee() {\n    const [chessboard, setChessboard] = useState(initialChessboard.clone());\n    const [pawnPromotion, setpawnPromotion] = useState();\n    const [moveList, setMoveList] = useState(chessboard.moveList);\n\n    const promoteRef = useRef(null);\n    const checkmateRef = useRef(null);\n\n    function playMove(currentPiece, desiredPosition) {\n        if (currentPiece.team === \"white\" && chessboard.totalTurns % 2 !== 1) return false;\n        if (currentPiece.team === \"black\" && chessboard.totalTurns % 2 !== 0) return false;\n        const validMove = currentPiece.possibleMoves.some(move => move.samePosition(desiredPosition));\n        if (!validMove) return false;\n\n        // Playmove modifies the board, therefore, the chessboard is updated\n        setChessboard(() => {\n            const clonedChessboard = chessboard.clone();\n            const prevPiecesLen = clonedChessboard.pieces.length;\n            clonedChessboard.totalTurns++;\n            // MOVE LOGIC\n            clonedChessboard.playMove(currentPiece, desiredPosition, validMove); \n            // MOVE NOTATION\n            const lastMove = clonedChessboard.moveList ? clonedChessboard.moveList[clonedChessboard.moveList.length - 1] : undefined;\n            const take = prevPiecesLen > clonedChessboard.length ? true : false;\n            const move = {type: currentPiece.type, position: desiredPosition, image: currentPiece.image, take};\n            if(!lastMove || lastMove.length === 2) {\n                clonedChessboard.moveList.push([move]);\n            } else if(lastMove.length < 2) {\n                clonedChessboard.moveList[clonedChessboard.moveList.length - 1].push(move);\n            }\n            // CHECK IF IT IS A DRAW\n            if (clonedChessboard.winningTeam || clonedChessboard.draw) checkmateRef.current.classList.remove(\"hidden\");\n            return clonedChessboard;\n        });\n\n        setMoveList(chessboard.moveList)\n\n        // PAWN PROMOTION\n        const promotion = currentPiece.team === \"white\" ? 7 : 0;\n\n        if (desiredPosition.y === promotion && currentPiece.isPawn) {\n            promoteRef.current.classList.remove(\"hidden\");\n            setpawnPromotion(prevPromotionPawn => {\n                const clonedCurrentPiece = currentPiece.clone()\n                clonedCurrentPiece.position = desiredPosition.clone();\n                return prevPromotionPawn =  clonedCurrentPiece;\n            });\n        }\n    }    \n    function promotePawn(type) {\n        if (!pawnPromotion) return;\n        promoteRef.current.classList.add('hidden');\n        setChessboard(() => {\n            const clonedChessboard = chessboard.clone();\n            clonedChessboard.pieces = clonedChessboard.pieces.reduce((result, piece) => {\n                if (piece.samePosition(pawnPromotion.position)) { \n                    switch(type) {\n                        case \"queen\":\n                            result.push(new Queen(piece.position.clone(), piece.team));\n                            break;\n                        case \"knight\":\n                            result.push(new Knight(piece.position.clone(), piece.team));\n                            break;\n                        case \"bishop\":\n                            result.push(new Bishop(piece.position.clone(), piece.team));\n                            break;\n                        case \"rook\":\n                            result.push(new Rook(piece.position.clone(), piece.team, true));\n                            break;\n                        default:\n                            break;\n                    }\n                } else {\n                    result.push(piece);\n                }\n                return result;\n            }, []);\n            clonedChessboard.getPossibleMoves();\n            if (clonedChessboard.winningTeam || clonedChessboard.draw) checkmateRef.current.classList.remove(\"hidden\");\n            return clonedChessboard;\n        });\n        chessboard.getPossibleMoves();\n    }\n\n    function setPromotionTeam() {\n        if (!pawnPromotion) return \"white\";\n        return pawnPromotion.team === \"white\" ? \"white\" : \"black\";\n    }\n    function restartGame() {\n        checkmateRef.current.classList.add(\"hidden\");\n        setChessboard(() => {\n            const clonedChessboard = initialChessboard.clone();\n            initialChessboard.totalTurns = 1;\n            initialChessboard.moveList = [];\n            setMoveList([]);\n            return clonedChessboard;\n        });\n    }\n    return (\n        <>\n            <main className='main-container'>\n                <ChessBoard playMove={playMove} pieces={chessboard.pieces}/>\n                <MoveList moveList={moveList} chessboard={chessboard}/>\n            </main>\n            <PromotionAlert setPromotionTeam={setPromotionTeam} promotePawn={promotePawn} promoteRef={promoteRef}/>\n            <GameOver winningTeam={chessboard.winningTeam} checkmateRef={checkmateRef} restartGame={restartGame}/>\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}