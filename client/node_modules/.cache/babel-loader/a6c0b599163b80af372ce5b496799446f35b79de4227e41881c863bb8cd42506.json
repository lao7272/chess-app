{"ast":null,"code":"var _jsxFileName = \"/Users/lao/Desktop/chess-app/src/components/Chessboard/Chessboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE } from '../../Constants';\nimport { Position } from '../../models';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(_ref) {\n  _s();\n  let {\n    playMove,\n    pieces\n  } = _ref;\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const chessboardRef = useRef(null);\n  let board = [];\n  const grabPiece = e => {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  };\n  const movePiece = async e => {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 15;\n      const minY = chessboard.offsetTop - 10;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 53;\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      let xValue = `${x}px`;\n      let yValue = `${y}px`;\n\n      // CHESSBOARD CONSTRAINTS\n      if (x < minX) {\n        xValue = `${minX}px`;\n      } else if (x > maxX) {\n        xValue = `${maxX}px`;\n      }\n      if (y < minY) {\n        yValue = `${minY}px`;\n      } else if (y > maxY) {\n        yValue = `${maxY}px`;\n      }\n      activePiece.style.left = xValue;\n      activePiece.style.top = yValue;\n      activePiece.style.position = \"absolute\";\n    }\n  };\n  const dropPiece = e => {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.samePosition(grabPosition));\n      if (currentPiece) {\n        const isValidMove = playMove(currentPiece.clone(), new Position(x, y));\n        if (!isValidMove) {\n          // RESETS THE PIECE POSITION\n          activePiece.style.location = \"relative\";\n          activePiece.style.removeProperty('top');\n          activePiece.style.removeProperty('left');\n        }\n      }\n    }\n    setActivePiece(null);\n  };\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.samePosition({\n        x: i,\n        y: j\n      }));\n      const image = piece ? piece.image : undefined;\n      const currentPiece = pieces.find(p => p.samePosition(grabPosition));\n      let highlight;\n      if (currentPiece && activePiece) highlight = currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => p.samePosition({\n        x: i,\n        y: j\n      })) : false;\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        number: number,\n        image: image,\n        highlight: highlight\n      }, `${j}${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 24\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      onMouseUp: e => dropPiece(e),\n      className: \"chessboard\",\n      ref: chessboardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Chessboard, \"FtAp0mvDbPD1BkmoUv1Cw1I5R7w=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useRef","useState","Tile","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","Position","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","_ref","_s","playMove","pieces","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","chessboardRef","board","grabPiece","e","element","target","chessboard","current","classList","contains","grabX","Math","floor","clientX","offsetLeft","grabY","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","xValue","yValue","dropPiece","currentPiece","find","p","samePosition","isValidMove","clone","location","removeProperty","j","length","i","number","piece","image","undefined","highlight","possibleMoves","some","push","fileName","_jsxFileName","lineNumber","columnNumber","children","onMouseMove","onMouseDown","onMouseUp","className","ref","_c","$RefreshReg$"],"sources":["/Users/lao/Desktop/chess-app/src/components/Chessboard/Chessboard.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE } from '../../Constants';\nimport { Position } from '../../models';\n\nexport default function Chessboard({ playMove, pieces }) {\n    const [activePiece, setActivePiece] = useState(null);\n    const [grabPosition, setGrabPosition] = useState({ x: -1, y: -1 });\n\n    const chessboardRef = useRef(null);\n    let board = [];\n\n    const grabPiece = (e) => {\n        const element = e.target;\n        const chessboard = chessboardRef.current;\n        if (element.classList.contains(\"chess-piece\") && chessboard) {\n            const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n            const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\n            setGrabPosition({ x: grabX, y: grabY });\n\n            const x = e.clientX - GRID_SIZE / 2;\n            const y = e.clientY - GRID_SIZE / 2;\n            element.style.position = \"absolute\";\n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n\n            setActivePiece(element);\n        }\n\n    }\n\n    const movePiece = async (e) => {\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard) {\n            const minX = chessboard.offsetLeft - 15;\n            const minY = chessboard.offsetTop - 10;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - 53;\n\n            const x = e.clientX - GRID_SIZE / 2;\n            const y = e.clientY - GRID_SIZE / 2;\n\n            let xValue = `${x}px`;\n            let yValue = `${y}px`;\n\n            // CHESSBOARD CONSTRAINTS\n            if (x < minX) {\n                xValue = `${minX}px`;\n            } else if (x > maxX) {\n                xValue = `${maxX}px`;\n            }\n            if (y < minY) {\n                yValue = `${minY}px`;\n            } else if (y > maxY) {\n                yValue = `${maxY}px`;\n            }\n\n            activePiece.style.left = xValue;\n            activePiece.style.top = yValue;\n            activePiece.style.position = \"absolute\";\n        }\n    }\n\n    const dropPiece = (e) => {\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard) {\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\n\n            const currentPiece = pieces.find(p => p.samePosition(grabPosition));\n\n            if (currentPiece) {\n                const isValidMove = playMove(currentPiece.clone(), new Position(x, y)); \n                if (!isValidMove) {\n                    // RESETS THE PIECE POSITION\n                    activePiece.style.location = \"relative\";\n                    activePiece.style.removeProperty('top');\n                    activePiece.style.removeProperty('left');\n                }\n            }\n        }\n\n        setActivePiece(null);\n    }\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n            const number = i + j;\n            const piece = pieces.find(p => p.samePosition({ x: i, y: j }));\n            const image = piece ? piece.image : undefined;\n            const currentPiece = pieces.find(p => p.samePosition(grabPosition));\n            let highlight;\n            if (currentPiece && activePiece) highlight = currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => p.samePosition({ x: i, y: j })) : false;\n            board.push(<Tile key={`${j}${i}`} number={number} image={image} highlight={highlight} />);\n        }\n    }\n    return (\n        <>\n            <div\n                onMouseMove={e => movePiece(e)}\n                onMouseDown={e => grabPiece(e)}\n                onMouseUp={e => dropPiece(e)}\n                className='chessboard'\n                ref={chessboardRef}\n            >\n                {board}\n            </div>\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}